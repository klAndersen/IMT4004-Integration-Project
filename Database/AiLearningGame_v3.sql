-- MySQL Script generated by MySQL Workbench
-- 05/21/15 08:28:54
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema GP_Game
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `GP_Game` ;

-- -----------------------------------------------------
-- Schema GP_Game
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `GP_Game` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `GP_Game` ;

-- -----------------------------------------------------
-- Table `GP_Game`.`tblUserType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GP_Game`.`tblUserType` ;

CREATE TABLE IF NOT EXISTS `GP_Game`.`tblUserType` (
  `userTypeID` INT NULL AUTO_INCREMENT,
  `userType` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`userTypeID`),
  UNIQUE INDEX `userType_UNIQUE` (`userType` ASC))
ENGINE = InnoDB
COMMENT = 'Acess rights, e.g. Admin, Student/Player, Guest.\nHere the Admin could be teacher, Player would be the student and Guest would be anyone not registered\n';


-- -----------------------------------------------------
-- Table `GP_Game`.`tblUser`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GP_Game`.`tblUser` ;

CREATE TABLE IF NOT EXISTS `GP_Game`.`tblUser` (
  `userID` INT NULL AUTO_INCREMENT,
  `studNo` VARCHAR(45) NOT NULL,
  `email` VARCHAR(256) NOT NULL,
  `firstName` VARCHAR(255) NOT NULL,
  `lastName` VARCHAR(255) NOT NULL,
  `password` LONGTEXT NOT NULL,
  `registrationDate` DATETIME NOT NULL,
  `fk_tblUserType` INT NOT NULL,
  PRIMARY KEY (`userID`),
  INDEX `fk_tblUser_tblUserType` (`fk_tblUserType` ASC),
  UNIQUE INDEX `UNIQUE_name_studNo` (`studNo` ASC, `firstName` ASC, `lastName` ASC),
  CONSTRAINT `fk_tblUser_tblUserType`
    FOREIGN KEY (`fk_tblUserType`)
    REFERENCES `GP_Game`.`tblUserType` (`userTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'The table containing data for the player. Since this is mainly targeted on students, \nthe setup is that the studno and/or name can be added.';


-- -----------------------------------------------------
-- Table `GP_Game`.`tblLogType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GP_Game`.`tblLogType` ;

CREATE TABLE IF NOT EXISTS `GP_Game`.`tblLogType` (
  `logTypeID` INT NULL AUTO_INCREMENT,
  `logType` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`logTypeID`),
  UNIQUE INDEX `logType_UNIQUE` (`logType` ASC))
ENGINE = InnoDB
COMMENT = 'Different types of logs, e.g. \"user logged in\", \"error occurred\", etc.';


-- -----------------------------------------------------
-- Table `GP_Game`.`tblLog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GP_Game`.`tblLog` ;

CREATE TABLE IF NOT EXISTS `GP_Game`.`tblLog` (
  `logID` INT NULL AUTO_INCREMENT,
  `logDate` DATETIME NOT NULL,
  `logEvent` VARCHAR(255) NOT NULL,
  `fk_tblUser` INT NULL,
  `fk_tblLogType` INT NOT NULL,
  PRIMARY KEY (`logID`),
  INDEX `fk_tblLog_tblUser1_idx` (`fk_tblUser` ASC),
  INDEX `fk_tblLog_tblLogType1_idx` (`fk_tblLogType` ASC),
  CONSTRAINT `fk_tblLog_tblUser1`
    FOREIGN KEY (`fk_tblUser`)
    REFERENCES `GP_Game`.`tblUser` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tblLog_tblLogType1`
    FOREIGN KEY (`fk_tblLogType`)
    REFERENCES `GP_Game`.`tblLogType` (`logTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'The actual log of the event that occurred.\nThe FK to tblPlayer may be redundant, for now it is there to be able to link logged events to the given player.';


-- -----------------------------------------------------
-- Table `GP_Game`.`tblGameType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GP_Game`.`tblGameType` ;

CREATE TABLE IF NOT EXISTS `GP_Game`.`tblGameType` (
  `gameTypeID` INT NULL AUTO_INCREMENT,
  `gameType` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`gameTypeID`),
  UNIQUE INDEX `gameType_UNIQUE` (`gameType` ASC))
ENGINE = InnoDB
COMMENT = 'Function types used for defining what type of math assignment the player should solve.\nExamples are LISP, function (e.g. \"guess my function\", \"guess correct answer\"), etc.';


-- -----------------------------------------------------
-- Table `GP_Game`.`tblGames`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GP_Game`.`tblGames` ;

CREATE TABLE IF NOT EXISTS `GP_Game`.`tblGames` (
  `gameID` INT NULL AUTO_INCREMENT,
  `gameName` VARCHAR(45) NOT NULL,
  `gameTask` VARCHAR(255) NOT NULL,
  `gameDescription` VARCHAR(255) NULL,
  `correctTextAnswer` LONGTEXT NULL,
  `correctNumericAnswer` DOUBLE NULL,
  `fk_tblGameType` INT NOT NULL,
  PRIMARY KEY (`gameID`),
  INDEX `fk_tblGames_tblGameType` (`fk_tblGameType` ASC),
  UNIQUE INDEX `UNIQUE_task_name` (`gameName` ASC, `gameTask` ASC),
  CONSTRAINT `fk_tblGames_tblGameType1`
    FOREIGN KEY (`fk_tblGameType`)
    REFERENCES `GP_Game`.`tblGameType` (`gameTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table containing the game data. \nGame name: The name of this game/assignment.\nGame description: What is the goal of this game/assignment?\nGame task: The task to be solved.';


-- -----------------------------------------------------
-- Table `GP_Game`.`tblGamesPlayed`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GP_Game`.`tblGamesPlayed` ;

CREATE TABLE IF NOT EXISTS `GP_Game`.`tblGamesPlayed` (
  `gamePlayID` INT NULL AUTO_INCREMENT,
  `score` DOUBLE NOT NULL,
  `noOfTries` INT NOT NULL,
  `answerGiven` LONGTEXT NOT NULL,
  `fk_tblUser` INT NOT NULL,
  `fk_tblGames` INT NOT NULL,
  PRIMARY KEY (`gamePlayID`),
  INDEX `fk_tblGamesPlayed_tblGames` (`fk_tblGames` ASC),
  INDEX `fk_tblGamesPlayed_tblUser` (`fk_tblUser` ASC),
  UNIQUE INDEX `UNIQUE_user_games` (`fk_tblUser` ASC, `fk_tblGames` ASC),
  CONSTRAINT `fk_tblGamesPlayed_tblGames1`
    FOREIGN KEY (`fk_tblGames`)
    REFERENCES `GP_Game`.`tblGames` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tblGamesPlayed_tblUser1`
    FOREIGN KEY (`fk_tblUser`)
    REFERENCES `GP_Game`.`tblUser` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table for tracking user progress, i.e. unique to avoid that player gets the same games (this to disable possibility of getting high score by repeating tasks).\nThe score is then linked to the given player and the given game to keep track of students progress.';

USE `GP_Game` ;

-- -----------------------------------------------------
-- Placeholder table for view `GP_Game`.`playerProgress`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GP_Game`.`playerProgress` (`"studentNo"` INT, `"playerName"` INT, `"score"` INT, `"gameName"` INT, `"answerGiven"` INT, `"noOfTries"` INT);

-- -----------------------------------------------------
-- View `GP_Game`.`playerProgress`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `GP_Game`.`playerProgress` ;
DROP TABLE IF EXISTS `GP_Game`.`playerProgress`;
USE `GP_Game`;
CREATE  OR REPLACE VIEW `playerProgress` AS
	SELECT DISTINCT u.studNo AS "studentNo",
		CONCAT(u.firstName, ' ', u.laStName) AS "playerName",
		IFNULL(gp.score, 0) AS "score",
		IFNULL(g.gameName,"No games played.")  AS "gameName",
        gp.answerGiven AS "answerGiven",
        gp.noOfTries AS "noOfTries"
	FROM tblGameType gt,
		tblUser u 
		LEFT JOIN tblGamesPlayed gp 
			ON gp.fk_tblUser = u.userID     
		LEFT JOIN tblGames g
				ON gp.fk_tblGames = g.gameID
	ORDER BY u.studNo;
USE `GP_Game`;

DELIMITER $$

USE `GP_Game`$$
DROP TRIGGER IF EXISTS `GP_Game`.`tblUser_AFTER_INSERT` $$
USE `GP_Game`$$
CREATE DEFINER = CURRENT_USER 
TRIGGER `GP_Game`.`tblUser_AFTER_INSERT` 
AFTER INSERT ON `tblUser` 
FOR EACH ROW
BEGIN 
	Insert into tblLog values (
		null,
        NOW(),
        CONCAT('New user registered: "', new.firstName, ' ', new.lastName, '", with User ID: ', new.userID, ' and StudNo: ', new.studNo, '.'),
        new.userID,
        (Select logTypeID From tblLogType where logType="New player registered")
    );
END$$


USE `GP_Game`$$
DROP TRIGGER IF EXISTS `GP_Game`.`tblGamesPlayed_AFTER_INSERT` $$
USE `GP_Game`$$
CREATE DEFINER = CURRENT_USER 
TRIGGER `GP_Game`.`tblGamesPlayed_AFTER_INSERT` 
AFTER INSERT ON `tblGamesPlayed` 
FOR EACH ROW
BEGIN

Insert into tblLog values (
null,
NOW(),        
CONCAT('Player with stud.No: "', (SELECT studNo FROM tblUser WHERE userID = new.fk_tblUser), '" and User ID: ', new.fk_tblUser, ', completed the game ', (SELECT gameName FROM tblGames WHERE gameID = new.fk_tblGames), ', GameID: ', new.fk_tblGames),
new.fk_tblUser,
(Select logTypeID From tblLogType where logType="Player completed game")
);

END
    $$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `GP_Game`.`tblUserType`
-- -----------------------------------------------------
START TRANSACTION;
USE `GP_Game`;
INSERT INTO `GP_Game`.`tblUserType` (`userTypeID`, `userType`) VALUES (1, 'Administrator');
INSERT INTO `GP_Game`.`tblUserType` (`userTypeID`, `userType`) VALUES (2, 'Teacher');
INSERT INTO `GP_Game`.`tblUserType` (`userTypeID`, `userType`) VALUES (3, 'Student');
INSERT INTO `GP_Game`.`tblUserType` (`userTypeID`, `userType`) VALUES (4, 'Guest');

COMMIT;


-- -----------------------------------------------------
-- Data for table `GP_Game`.`tblLogType`
-- -----------------------------------------------------
START TRANSACTION;
USE `GP_Game`;
INSERT INTO `GP_Game`.`tblLogType` (`logTypeID`, `logType`) VALUES (1, 'Error');
INSERT INTO `GP_Game`.`tblLogType` (`logTypeID`, `logType`) VALUES (2, 'Login');
INSERT INTO `GP_Game`.`tblLogType` (`logTypeID`, `logType`) VALUES (3, 'New game added');
INSERT INTO `GP_Game`.`tblLogType` (`logTypeID`, `logType`) VALUES (4, 'Game updated');
INSERT INTO `GP_Game`.`tblLogType` (`logTypeID`, `logType`) VALUES (5, 'New player registered');
INSERT INTO `GP_Game`.`tblLogType` (`logTypeID`, `logType`) VALUES (6, 'Player completed game');

COMMIT;


-- -----------------------------------------------------
-- Data for table `GP_Game`.`tblGameType`
-- -----------------------------------------------------
START TRANSACTION;
USE `GP_Game`;
INSERT INTO `GP_Game`.`tblGameType` (`gameTypeID`, `gameType`) VALUES (1, 'LISP Function');
INSERT INTO `GP_Game`.`tblGameType` (`gameTypeID`, `gameType`) VALUES (2, 'Math Function');
INSERT INTO `GP_Game`.`tblGameType` (`gameTypeID`, `gameType`) VALUES (3, 'Genetic Programming');

COMMIT;

